#!groovy 

@Library('PSL@LKG')

def jobs = [:]

jobs["VS2019"] = {
    node ("TOR_Win_GPU_ECS") {
        dir ("ArgoX") {
            timestamps {
              stage ("VS2019-Build") {
                    checkout scm
                    bat "git clean -fdx"
                    bat "if exist build rd /s /q build"
                    bat "mkdir build"
                    //bat "cd build && cmake -G \"Visual Studio 16 2019\" .. && cmake --build . --target libArgoX --config Release -j 99"  
                    bat "cd build && cmake -G \"Visual Studio 16 2019\"  .. && cmake --build . --target libArgoXTest --config Release -j 99"
                    bat "cd build && ctest --no-compress-output --output-on-failure -T Test -C Release"                   
                }
            }
        }
    }
}


jobs["GCC9-CUDA11.2"] = {
    node ("aws-centos-gpu") {
        dir ("ArgoX") {
            timestamps {
                checkout scm
                sh "git clean -fdx"
                sshagent(["ors_git_ssh_key_np"]) {
                   docker.image("autodesk-docker-build-images.art-bobcat.autodesk.com/research-sos-centos7-gcc9-cuda11.2").inside("-v $WORKSPACE:/gd-ArgoX -u root -v /tmp:/tmp --gpus all") {
                        stage ("GCC9-Build") {
                            //sh "git submodule update --recursive --init"    
                            sh "export PATH=$PATH:/opt/local/bin:/opt/local/sbin:/usr/bin/c++:/usr/bin/make"
                            sh "mkdir build" 
                            sh "cd build && cmake -DCMAKE_C_COMPILER=gcc .. && cmake --build . --target libArgoXTest --config Release -j 4"
                            sh "cd build && ctest --no-compress-output --output-on-failure -T Test -C Release"

                            //sh "./cmake/GenerateMakeRelease.sh"
                            //sh "cd build/Release && make -j 99 && ctest -i ./test_input/ --timeout 21600 --no-compress-output --output-on-failure -T Test -C Release"                           
                            //sh "cd build/Release && make -j 99"
                        }
                    }
                }
            }
        }
    }
}

//node('cloud&&centos')
node('aws-linux')
{
    stage('Harmony Scan')
    {
        scan = new ors.security.CommonHarmony(steps, env, Artifactory, scm).run_scan([
            "repository":"Research/gd-ArgoX",
            "product_output":"${env.WORKSPACE}",
            "analyze_results": true
        ])
    }
}

parallel jobs